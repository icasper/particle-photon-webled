
/Volumes/Data-01/Projects/Particle/particle-photon-webled/target/3.3.0/photon/particle-photon-webled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000012a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a12c0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a12c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000464  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1334  080a1334  00021334  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a135c  080a135c  0002135c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ac5e2  00000000  00000000  00021360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000ed33  00000000  00000000  000cd942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00018d67  00000000  00000000  000dc675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ec8  00000000  00000000  000f53dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004bc8  00000000  00000000  000f72a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024893  00000000  00000000  000fbe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000277f0  00000000  00000000  001206ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b6e9e  00000000  00000000  00147eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004e34  00000000  00000000  001fed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff93 	bl	80a0f58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff9b 	bl	80a0f74 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a12c4 	.word	0x080a12c4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200004d1 	.word	0x200004d1
 80a0058:	200004d1 	.word	0x200004d1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe43 	bl	80a0ce8 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a12a0 	.word	0x080a12a0
 80a0080:	080a12bc 	.word	0x080a12bc

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b832 	b.w	80a00ec <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f849 	bl	80a0120 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bde1 	b.w	80a0c58 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 b9cb 	b.w	80a0430 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 b9d1 	b.w	80a0440 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z6webLed6String>:

void loop() {
  
}

int webLed(String command){
 80a00b0:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00b2:	490b      	ldr	r1, [pc, #44]	; (80a00e0 <_Z6webLed6String+0x30>)
 80a00b4:	4605      	mov	r5, r0
 80a00b6:	f000 fbf5 	bl	80a08a4 <_ZNK6String6equalsEPKc>
  if(command == "on"){
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	b130      	cbz	r0, 80a00cc <_Z6webLed6String+0x1c>
    digitalWrite(led, HIGH);
 80a00be:	2101      	movs	r1, #1
    return 1;
  }
  else if(command == "off"){
    digitalWrite(led, LOW);
 80a00c0:	4b08      	ldr	r3, [pc, #32]	; (80a00e4 <_Z6webLed6String+0x34>)
 80a00c2:	8818      	ldrh	r0, [r3, #0]
 80a00c4:	f000 fe9d 	bl	80a0e02 <digitalWrite>
 80a00c8:	2001      	movs	r0, #1
    return 1;
  }
  else{
    return -1;
  }
 80a00ca:	bd38      	pop	{r3, r4, r5, pc}
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	4906      	ldr	r1, [pc, #24]	; (80a00e8 <_Z6webLed6String+0x38>)
 80a00d0:	f000 fbe8 	bl	80a08a4 <_ZNK6String6equalsEPKc>
  else if(command == "off"){
 80a00d4:	b108      	cbz	r0, 80a00da <_Z6webLed6String+0x2a>
    digitalWrite(led, LOW);
 80a00d6:	4621      	mov	r1, r4
 80a00d8:	e7f2      	b.n	80a00c0 <_Z6webLed6String+0x10>
    return -1;
 80a00da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a00de:	e7f4      	b.n	80a00ca <_Z6webLed6String+0x1a>
 80a00e0:	080a10e8 	.word	0x080a10e8
 80a00e4:	20000000 	.word	0x20000000
 80a00e8:	080a10eb 	.word	0x080a10eb

080a00ec <setup>:
void setup() {
 80a00ec:	b510      	push	{r4, lr}
  pinMode(led, OUTPUT);
 80a00ee:	4c08      	ldr	r4, [pc, #32]	; (80a0110 <setup+0x24>)
 80a00f0:	2101      	movs	r1, #1
 80a00f2:	8820      	ldrh	r0, [r4, #0]
 80a00f4:	f000 fe74 	bl	80a0de0 <pinMode>
  digitalWrite(led, LOW);
 80a00f8:	8820      	ldrh	r0, [r4, #0]
 80a00fa:	2100      	movs	r1, #0
 80a00fc:	f000 fe81 	bl	80a0e02 <digitalWrite>
}
 80a0100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0104:	4a03      	ldr	r2, [pc, #12]	; (80a0114 <setup+0x28>)
 80a0106:	4904      	ldr	r1, [pc, #16]	; (80a0118 <setup+0x2c>)
 80a0108:	4804      	ldr	r0, [pc, #16]	; (80a011c <setup+0x30>)
 80a010a:	f000 b9cf 	b.w	80a04ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a010e:	bf00      	nop
 80a0110:	20000000 	.word	0x20000000
 80a0114:	080a10ef 	.word	0x080a10ef
 80a0118:	080a00b1 	.word	0x080a00b1
 80a011c:	080a0481 	.word	0x080a0481

080a0120 <loop>:
}
 80a0120:	4770      	bx	lr
	...

080a0124 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0124:	b508      	push	{r3, lr}
 80a0126:	4b02      	ldr	r3, [pc, #8]	; (80a0130 <os_mutex_recursive_create+0xc>)
 80a0128:	681b      	ldr	r3, [r3, #0]
 80a012a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a012c:	9301      	str	r3, [sp, #4]
 80a012e:	bd08      	pop	{r3, pc}
 80a0130:	080601d0 	.word	0x080601d0

080a0134 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0134:	b508      	push	{r3, lr}
 80a0136:	4b02      	ldr	r3, [pc, #8]	; (80a0140 <os_mutex_recursive_destroy+0xc>)
 80a0138:	681b      	ldr	r3, [r3, #0]
 80a013a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a013c:	9301      	str	r3, [sp, #4]
 80a013e:	bd08      	pop	{r3, pc}
 80a0140:	080601d0 	.word	0x080601d0

080a0144 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0144:	b508      	push	{r3, lr}
 80a0146:	4b02      	ldr	r3, [pc, #8]	; (80a0150 <HAL_RNG_GetRandomNumber+0xc>)
 80a0148:	681b      	ldr	r3, [r3, #0]
 80a014a:	685b      	ldr	r3, [r3, #4]
 80a014c:	9301      	str	r3, [sp, #4]
 80a014e:	bd08      	pop	{r3, pc}
 80a0150:	0806019c 	.word	0x0806019c

080a0154 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0154:	b508      	push	{r3, lr}
 80a0156:	4b02      	ldr	r3, [pc, #8]	; (80a0160 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0158:	681b      	ldr	r3, [r3, #0]
 80a015a:	695b      	ldr	r3, [r3, #20]
 80a015c:	9301      	str	r3, [sp, #4]
 80a015e:	bd08      	pop	{r3, pc}
 80a0160:	0806019c 	.word	0x0806019c

080a0164 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0164:	b508      	push	{r3, lr}
 80a0166:	4b02      	ldr	r3, [pc, #8]	; (80a0170 <HAL_Pin_Mode+0xc>)
 80a0168:	681b      	ldr	r3, [r3, #0]
 80a016a:	689b      	ldr	r3, [r3, #8]
 80a016c:	9301      	str	r3, [sp, #4]
 80a016e:	bd08      	pop	{r3, pc}
 80a0170:	080601b0 	.word	0x080601b0

080a0174 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0174:	b508      	push	{r3, lr}
 80a0176:	4b02      	ldr	r3, [pc, #8]	; (80a0180 <HAL_Get_Pin_Mode+0xc>)
 80a0178:	681b      	ldr	r3, [r3, #0]
 80a017a:	68db      	ldr	r3, [r3, #12]
 80a017c:	9301      	str	r3, [sp, #4]
 80a017e:	bd08      	pop	{r3, pc}
 80a0180:	080601b0 	.word	0x080601b0

080a0184 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0184:	b508      	push	{r3, lr}
 80a0186:	4b02      	ldr	r3, [pc, #8]	; (80a0190 <HAL_GPIO_Write+0xc>)
 80a0188:	681b      	ldr	r3, [r3, #0]
 80a018a:	691b      	ldr	r3, [r3, #16]
 80a018c:	9301      	str	r3, [sp, #4]
 80a018e:	bd08      	pop	{r3, pc}
 80a0190:	080601b0 	.word	0x080601b0

080a0194 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0194:	b508      	push	{r3, lr}
 80a0196:	4b02      	ldr	r3, [pc, #8]	; (80a01a0 <hal_i2c_write+0xc>)
 80a0198:	681b      	ldr	r3, [r3, #0]
 80a019a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a019c:	9301      	str	r3, [sp, #4]
 80a019e:	bd08      	pop	{r3, pc}
 80a01a0:	080601ac 	.word	0x080601ac

080a01a4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a01a4:	b508      	push	{r3, lr}
 80a01a6:	4b02      	ldr	r3, [pc, #8]	; (80a01b0 <hal_i2c_available+0xc>)
 80a01a8:	681b      	ldr	r3, [r3, #0]
 80a01aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a01ac:	9301      	str	r3, [sp, #4]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	080601ac 	.word	0x080601ac

080a01b4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a01b4:	b508      	push	{r3, lr}
 80a01b6:	4b02      	ldr	r3, [pc, #8]	; (80a01c0 <hal_i2c_read+0xc>)
 80a01b8:	681b      	ldr	r3, [r3, #0]
 80a01ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a01bc:	9301      	str	r3, [sp, #4]
 80a01be:	bd08      	pop	{r3, pc}
 80a01c0:	080601ac 	.word	0x080601ac

080a01c4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a01c4:	b508      	push	{r3, lr}
 80a01c6:	4b02      	ldr	r3, [pc, #8]	; (80a01d0 <hal_i2c_peek+0xc>)
 80a01c8:	681b      	ldr	r3, [r3, #0]
 80a01ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a01cc:	9301      	str	r3, [sp, #4]
 80a01ce:	bd08      	pop	{r3, pc}
 80a01d0:	080601ac 	.word	0x080601ac

080a01d4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <hal_i2c_flush+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	080601ac 	.word	0x080601ac

080a01e4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <hal_i2c_is_enabled+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601ac 	.word	0x080601ac

080a01f4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b03      	ldr	r3, [pc, #12]	; (80a0204 <hal_i2c_init+0x10>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a01fe:	9301      	str	r3, [sp, #4]
 80a0200:	bd08      	pop	{r3, pc}
 80a0202:	0000      	.short	0x0000
 80a0204:	080601ac 	.word	0x080601ac

080a0208 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <hal_spi_init+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	69db      	ldr	r3, [r3, #28]
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601b4 	.word	0x080601b4

080a0218 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <hal_spi_is_enabled+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6a1b      	ldr	r3, [r3, #32]
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601b4 	.word	0x080601b4

080a0228 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <hal_usart_write+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601c4 	.word	0x080601c4

080a0238 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <hal_usart_available+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601c4 	.word	0x080601c4

080a0248 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <hal_usart_read+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c4 	.word	0x080601c4

080a0258 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <hal_usart_peek+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601c4 	.word	0x080601c4

080a0268 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <hal_usart_flush+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601c4 	.word	0x080601c4

080a0278 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <hal_usart_is_enabled+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601c4 	.word	0x080601c4

080a0288 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <hal_usart_available_data_for_write+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601c4 	.word	0x080601c4

080a0298 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <hal_usart_init_ex+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601c4 	.word	0x080601c4

080a02a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <HAL_USB_USART_Init+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	681b      	ldr	r3, [r3, #0]
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601d8 	.word	0x080601d8

080a02b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <HAL_USB_USART_Available_Data+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	691b      	ldr	r3, [r3, #16]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601d8 	.word	0x080601d8

080a02c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	695b      	ldr	r3, [r3, #20]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601d8 	.word	0x080601d8

080a02d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_USB_USART_Receive_Data+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	699b      	ldr	r3, [r3, #24]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601d8 	.word	0x080601d8

080a02e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_USB_USART_Send_Data+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	69db      	ldr	r3, [r3, #28]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601d8 	.word	0x080601d8

080a02f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_USB_USART_Flush_Data+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	6a1b      	ldr	r3, [r3, #32]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601d8 	.word	0x080601d8

080a0308 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <inet_gethostbyname+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601c0 	.word	0x080601c0

080a0318 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <set_system_mode+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	685b      	ldr	r3, [r3, #4]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601a4 	.word	0x080601a4

080a0328 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b03      	ldr	r3, [pc, #12]	; (80a0338 <system_ctrl_set_app_request_handler+0x10>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0332:	9301      	str	r3, [sp, #4]
 80a0334:	bd08      	pop	{r3, pc}
 80a0336:	0000      	.short	0x0000
 80a0338:	080601a4 	.word	0x080601a4

080a033c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b03      	ldr	r3, [pc, #12]	; (80a034c <system_ctrl_set_result+0x10>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0346:	9301      	str	r3, [sp, #4]
 80a0348:	bd08      	pop	{r3, pc}
 80a034a:	0000      	.short	0x0000
 80a034c:	080601a4 	.word	0x080601a4

080a0350 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <spark_function+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	685b      	ldr	r3, [r3, #4]
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601cc 	.word	0x080601cc

080a0360 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601cc 	.word	0x080601cc

080a0370 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <network_connect+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	685b      	ldr	r3, [r3, #4]
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601c8 	.word	0x080601c8

080a0380 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <network_connecting+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	689b      	ldr	r3, [r3, #8]
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601c8 	.word	0x080601c8

080a0390 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <network_disconnect+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	68db      	ldr	r3, [r3, #12]
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601c8 	.word	0x080601c8

080a03a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <network_ready+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	691b      	ldr	r3, [r3, #16]
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601c8 	.word	0x080601c8

080a03b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <network_on+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	695b      	ldr	r3, [r3, #20]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601c8 	.word	0x080601c8

080a03c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <network_off+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	699b      	ldr	r3, [r3, #24]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601c8 	.word	0x080601c8

080a03d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <network_listen+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	69db      	ldr	r3, [r3, #28]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601c8 	.word	0x080601c8

080a03e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <network_listening+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	6a1b      	ldr	r3, [r3, #32]
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601c8 	.word	0x080601c8

080a03f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <network_set_listen_timeout+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601c8 	.word	0x080601c8

080a0400 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <network_get_listen_timeout+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601c8 	.word	0x080601c8

080a0410 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <network_is_on+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601c8 	.word	0x080601c8

080a0420 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <network_is_off+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601c8 	.word	0x080601c8

080a0430 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <malloc+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	681b      	ldr	r3, [r3, #0]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601a0 	.word	0x080601a0

080a0440 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <free+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	685b      	ldr	r3, [r3, #4]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601a0 	.word	0x080601a0

080a0450 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <realloc+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	689b      	ldr	r3, [r3, #8]
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601a0 	.word	0x080601a0

080a0460 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <__assert_func+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601a0 	.word	0x080601a0

080a0470 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <newlib_impure_ptr_callback+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601a0 	.word	0x080601a0

080a0480 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0480:	b510      	push	{r4, lr}
 80a0482:	b088      	sub	sp, #32
 80a0484:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0486:	4668      	mov	r0, sp
 80a0488:	f000 f9df 	bl	80a084a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a048c:	4669      	mov	r1, sp
 80a048e:	a804      	add	r0, sp, #16
 80a0490:	f000 f9fd 	bl	80a088e <_ZN6StringC1ERKS_>
 80a0494:	a804      	add	r0, sp, #16
 80a0496:	47a0      	blx	r4
 80a0498:	4604      	mov	r4, r0
 80a049a:	a804      	add	r0, sp, #16
 80a049c:	f000 f98b 	bl	80a07b6 <_ZN6StringD1Ev>
    String p(param);
 80a04a0:	4668      	mov	r0, sp
 80a04a2:	f000 f988 	bl	80a07b6 <_ZN6StringD1Ev>
}
 80a04a6:	4620      	mov	r0, r4
 80a04a8:	b008      	add	sp, #32
 80a04aa:	bd10      	pop	{r4, pc}

080a04ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a04ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a04ae:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a04b0:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a04b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a04b6:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a04b8:	4669      	mov	r1, sp
 80a04ba:	461a      	mov	r2, r3
 80a04bc:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a04be:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a04c2:	f8ad 4000 	strh.w	r4, [sp]
 80a04c6:	f7ff ff43 	bl	80a0350 <spark_function>
}
 80a04ca:	b004      	add	sp, #16
 80a04cc:	bd10      	pop	{r4, pc}

080a04ce <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a04ce:	4770      	bx	lr

080a04d0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a04d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04d2:	4606      	mov	r6, r0
 80a04d4:	4615      	mov	r5, r2
 80a04d6:	460c      	mov	r4, r1
 80a04d8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a04da:	42bc      	cmp	r4, r7
 80a04dc:	d006      	beq.n	80a04ec <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a04de:	6833      	ldr	r3, [r6, #0]
 80a04e0:	4630      	mov	r0, r6
 80a04e2:	689b      	ldr	r3, [r3, #8]
 80a04e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a04e8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a04ea:	e7f6      	b.n	80a04da <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a04ec:	4628      	mov	r0, r5
 80a04ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04f0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a04f0:	2200      	movs	r2, #0
 80a04f2:	7c00      	ldrb	r0, [r0, #16]
 80a04f4:	f7ff be4e 	b.w	80a0194 <hal_i2c_write>

080a04f8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a04f8:	2100      	movs	r1, #0
 80a04fa:	7c00      	ldrb	r0, [r0, #16]
 80a04fc:	f7ff be52 	b.w	80a01a4 <hal_i2c_available>

080a0500 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0500:	2100      	movs	r1, #0
 80a0502:	7c00      	ldrb	r0, [r0, #16]
 80a0504:	f7ff be56 	b.w	80a01b4 <hal_i2c_read>

080a0508 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0508:	2100      	movs	r1, #0
 80a050a:	7c00      	ldrb	r0, [r0, #16]
 80a050c:	f7ff be5a 	b.w	80a01c4 <hal_i2c_peek>

080a0510 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0510:	2100      	movs	r1, #0
 80a0512:	7c00      	ldrb	r0, [r0, #16]
 80a0514:	f7ff be5e 	b.w	80a01d4 <hal_i2c_flush>

080a0518 <_ZN7TwoWireD0Ev>:
 80a0518:	b510      	push	{r4, lr}
 80a051a:	4604      	mov	r4, r0
 80a051c:	2114      	movs	r1, #20
 80a051e:	f7ff fdbc 	bl	80a009a <_ZdlPvj>
 80a0522:	4620      	mov	r0, r4
 80a0524:	bd10      	pop	{r4, pc}
	...

080a0528 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0528:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a052e:	4604      	mov	r4, r0
 80a0530:	4608      	mov	r0, r1
 80a0532:	2100      	movs	r1, #0
 80a0534:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0538:	4b03      	ldr	r3, [pc, #12]	; (80a0548 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a053a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a053c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a053e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0540:	f7ff fe58 	bl	80a01f4 <hal_i2c_init>
}
 80a0544:	4620      	mov	r0, r4
 80a0546:	bd10      	pop	{r4, pc}
 80a0548:	080a1100 	.word	0x080a1100

080a054c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a054c:	4770      	bx	lr

080a054e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a054e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0550:	460e      	mov	r6, r1
 80a0552:	2400      	movs	r4, #0
 80a0554:	f100 0708 	add.w	r7, r0, #8
 80a0558:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a055a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a055e:	220a      	movs	r2, #10
 80a0560:	4630      	mov	r0, r6
 80a0562:	f000 f8f6 	bl	80a0752 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0566:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0568:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a056a:	d101      	bne.n	80a0570 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a056c:	4620      	mov	r0, r4
 80a056e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0570:	2c00      	cmp	r4, #0
 80a0572:	d0f2      	beq.n	80a055a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0574:	212e      	movs	r1, #46	; 0x2e
 80a0576:	4630      	mov	r0, r6
 80a0578:	f000 f8e8 	bl	80a074c <_ZN5Print5printEc>
 80a057c:	4404      	add	r4, r0
 80a057e:	e7ec      	b.n	80a055a <_ZNK9IPAddress7printToER5Print+0xc>

080a0580 <_ZN9IPAddressD0Ev>:
 80a0580:	b510      	push	{r4, lr}
 80a0582:	4604      	mov	r4, r0
 80a0584:	2118      	movs	r1, #24
 80a0586:	f7ff fd88 	bl	80a009a <_ZdlPvj>
 80a058a:	4620      	mov	r0, r4
 80a058c:	bd10      	pop	{r4, pc}
	...

080a0590 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0590:	b510      	push	{r4, lr}
 80a0592:	4604      	mov	r4, r0
 80a0594:	4b04      	ldr	r3, [pc, #16]	; (80a05a8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0596:	2211      	movs	r2, #17
 80a0598:	2100      	movs	r1, #0
 80a059a:	f840 3b04 	str.w	r3, [r0], #4
 80a059e:	f000 fce9 	bl	80a0f74 <memset>
}
 80a05a2:	4620      	mov	r0, r4
 80a05a4:	bd10      	pop	{r4, pc}
 80a05a6:	bf00      	nop
 80a05a8:	080a1128 	.word	0x080a1128

080a05ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a05ac:	4603      	mov	r3, r0
 80a05ae:	4a07      	ldr	r2, [pc, #28]	; (80a05cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a05b0:	b510      	push	{r4, lr}
 80a05b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a05b6:	f101 0210 	add.w	r2, r1, #16
 80a05ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80a05be:	4291      	cmp	r1, r2
 80a05c0:	f843 4b04 	str.w	r4, [r3], #4
 80a05c4:	d1f9      	bne.n	80a05ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a05c6:	780a      	ldrb	r2, [r1, #0]
 80a05c8:	701a      	strb	r2, [r3, #0]
}
 80a05ca:	bd10      	pop	{r4, pc}
 80a05cc:	080a1128 	.word	0x080a1128

080a05d0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a05d0:	4a02      	ldr	r2, [pc, #8]	; (80a05dc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a05d2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a05d6:	2204      	movs	r2, #4
 80a05d8:	7502      	strb	r2, [r0, #20]
}
 80a05da:	4770      	bx	lr
 80a05dc:	080a1128 	.word	0x080a1128

080a05e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a05e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a05e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a05e6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a05ea:	2304      	movs	r3, #4
 80a05ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a05f0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a05f4:	6044      	str	r4, [r0, #4]
 80a05f6:	7503      	strb	r3, [r0, #20]
}
 80a05f8:	bd10      	pop	{r4, pc}
	...

080a05fc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a05fc:	b513      	push	{r0, r1, r4, lr}
 80a05fe:	4c04      	ldr	r4, [pc, #16]	; (80a0610 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0600:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0602:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a0606:	9400      	str	r4, [sp, #0]
 80a0608:	f7ff ffea 	bl	80a05e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a060c:	b002      	add	sp, #8
 80a060e:	bd10      	pop	{r4, pc}
 80a0610:	080a1128 	.word	0x080a1128

080a0614 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0614:	4b01      	ldr	r3, [pc, #4]	; (80a061c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0616:	4a02      	ldr	r2, [pc, #8]	; (80a0620 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0618:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a061a:	4770      	bx	lr
 80a061c:	20000070 	.word	0x20000070
 80a0620:	080a1134 	.word	0x080a1134

080a0624 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0624:	2300      	movs	r3, #0
 80a0626:	6840      	ldr	r0, [r0, #4]
 80a0628:	461a      	mov	r2, r3
 80a062a:	f7ff bea1 	b.w	80a0370 <network_connect>

080a062e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a062e:	2200      	movs	r2, #0
 80a0630:	2102      	movs	r1, #2
 80a0632:	6840      	ldr	r0, [r0, #4]
 80a0634:	f7ff beac 	b.w	80a0390 <network_disconnect>

080a0638 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0638:	2200      	movs	r2, #0
 80a063a:	6840      	ldr	r0, [r0, #4]
 80a063c:	4611      	mov	r1, r2
 80a063e:	f7ff be9f 	b.w	80a0380 <network_connecting>

080a0642 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0642:	2200      	movs	r2, #0
 80a0644:	6840      	ldr	r0, [r0, #4]
 80a0646:	4611      	mov	r1, r2
 80a0648:	f7ff beaa 	b.w	80a03a0 <network_ready>

080a064c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a064c:	2300      	movs	r3, #0
 80a064e:	6840      	ldr	r0, [r0, #4]
 80a0650:	461a      	mov	r2, r3
 80a0652:	4619      	mov	r1, r3
 80a0654:	f7ff beac 	b.w	80a03b0 <network_on>

080a0658 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0658:	2300      	movs	r3, #0
 80a065a:	6840      	ldr	r0, [r0, #4]
 80a065c:	461a      	mov	r2, r3
 80a065e:	4619      	mov	r1, r3
 80a0660:	f7ff beae 	b.w	80a03c0 <network_off>

080a0664 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0664:	2100      	movs	r1, #0
 80a0666:	6840      	ldr	r0, [r0, #4]
 80a0668:	f7ff bed2 	b.w	80a0410 <network_is_on>

080a066c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a066c:	2100      	movs	r1, #0
 80a066e:	6840      	ldr	r0, [r0, #4]
 80a0670:	f7ff bed6 	b.w	80a0420 <network_is_off>

080a0674 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0674:	2200      	movs	r2, #0
 80a0676:	6840      	ldr	r0, [r0, #4]
 80a0678:	f081 0101 	eor.w	r1, r1, #1
 80a067c:	f7ff bea8 	b.w	80a03d0 <network_listen>

080a0680 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0680:	2200      	movs	r2, #0
 80a0682:	6840      	ldr	r0, [r0, #4]
 80a0684:	f7ff beb4 	b.w	80a03f0 <network_set_listen_timeout>

080a0688 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0688:	2200      	movs	r2, #0
 80a068a:	6840      	ldr	r0, [r0, #4]
 80a068c:	4611      	mov	r1, r2
 80a068e:	f7ff beb7 	b.w	80a0400 <network_get_listen_timeout>

080a0692 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0692:	2200      	movs	r2, #0
 80a0694:	6840      	ldr	r0, [r0, #4]
 80a0696:	4611      	mov	r1, r2
 80a0698:	f7ff bea2 	b.w	80a03e0 <network_listening>

080a069c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a069c:	b570      	push	{r4, r5, r6, lr}
 80a069e:	4615      	mov	r5, r2
 80a06a0:	b08e      	sub	sp, #56	; 0x38
 80a06a2:	4604      	mov	r4, r0
    IPAddress addr;
 80a06a4:	a808      	add	r0, sp, #32
 80a06a6:	f7ff ff73 	bl	80a0590 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a06aa:	2211      	movs	r2, #17
 80a06ac:	2100      	movs	r1, #0
 80a06ae:	a803      	add	r0, sp, #12
 80a06b0:	f000 fc60 	bl	80a0f74 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a06b4:	2600      	movs	r6, #0
 80a06b6:	4628      	mov	r0, r5
 80a06b8:	f000 fc9c 	bl	80a0ff4 <strlen>
 80a06bc:	4b0a      	ldr	r3, [pc, #40]	; (80a06e8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a06be:	9600      	str	r6, [sp, #0]
 80a06c0:	b281      	uxth	r1, r0
 80a06c2:	685b      	ldr	r3, [r3, #4]
 80a06c4:	4628      	mov	r0, r5
 80a06c6:	aa03      	add	r2, sp, #12
 80a06c8:	f7ff fe1e 	bl	80a0308 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a06cc:	b130      	cbz	r0, 80a06dc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a06ce:	4631      	mov	r1, r6
 80a06d0:	4620      	mov	r0, r4
 80a06d2:	f7ff ff7d 	bl	80a05d0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a06d6:	4620      	mov	r0, r4
 80a06d8:	b00e      	add	sp, #56	; 0x38
 80a06da:	bd70      	pop	{r4, r5, r6, pc}
 80a06dc:	4620      	mov	r0, r4
 80a06de:	a903      	add	r1, sp, #12
 80a06e0:	f7ff ff64 	bl	80a05ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a06e4:	e7f7      	b.n	80a06d6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a06e6:	bf00      	nop
 80a06e8:	200003d4 	.word	0x200003d4

080a06ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a06ec:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a06ee:	4a03      	ldr	r2, [pc, #12]	; (80a06fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a06f0:	601a      	str	r2, [r3, #0]
 80a06f2:	2200      	movs	r2, #0
 80a06f4:	605a      	str	r2, [r3, #4]

} // spark
 80a06f6:	4770      	bx	lr
 80a06f8:	20000074 	.word	0x20000074
 80a06fc:	080a1140 	.word	0x080a1140

080a0700 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0702:	4606      	mov	r6, r0
 80a0704:	460d      	mov	r5, r1
  size_t n = 0;
 80a0706:	2400      	movs	r4, #0
 80a0708:	188f      	adds	r7, r1, r2
  while (size--) {
 80a070a:	42bd      	cmp	r5, r7
 80a070c:	d00c      	beq.n	80a0728 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a070e:	6833      	ldr	r3, [r6, #0]
 80a0710:	4630      	mov	r0, r6
 80a0712:	689b      	ldr	r3, [r3, #8]
 80a0714:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0718:	4798      	blx	r3
     if (chunk>=0)
 80a071a:	1e03      	subs	r3, r0, #0
 80a071c:	db01      	blt.n	80a0722 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a071e:	441c      	add	r4, r3
  while (size--) {
 80a0720:	e7f3      	b.n	80a070a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0722:	2c00      	cmp	r4, #0
 80a0724:	bf08      	it	eq
 80a0726:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0728:	4620      	mov	r0, r4
 80a072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a072c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a072c:	b570      	push	{r4, r5, r6, lr}
 80a072e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0730:	460c      	mov	r4, r1
    }
 80a0732:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0734:	b149      	cbz	r1, 80a074a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0736:	f000 fc5d 	bl	80a0ff4 <strlen>
 80a073a:	682b      	ldr	r3, [r5, #0]
 80a073c:	4602      	mov	r2, r0
 80a073e:	4621      	mov	r1, r4
 80a0740:	4628      	mov	r0, r5
    }
 80a0742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0746:	68db      	ldr	r3, [r3, #12]
 80a0748:	4718      	bx	r3
    }
 80a074a:	bd70      	pop	{r4, r5, r6, pc}

080a074c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a074c:	6803      	ldr	r3, [r0, #0]
 80a074e:	689b      	ldr	r3, [r3, #8]
 80a0750:	4718      	bx	r3

080a0752 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0752:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0754:	2a01      	cmp	r2, #1
 80a0756:	bf98      	it	ls
 80a0758:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a075a:	b530      	push	{r4, r5, lr}
 80a075c:	b08b      	sub	sp, #44	; 0x2c
 80a075e:	460c      	mov	r4, r1
  *str = '\0';
 80a0760:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0764:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0766:	4625      	mov	r5, r4
 80a0768:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a076c:	fb04 5312 	mls	r3, r4, r2, r5
 80a0770:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0772:	2b09      	cmp	r3, #9
 80a0774:	bf94      	ite	ls
 80a0776:	3330      	addls	r3, #48	; 0x30
 80a0778:	3337      	addhi	r3, #55	; 0x37
 80a077a:	b2db      	uxtb	r3, r3
  } while(n);
 80a077c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a077e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0782:	d9f0      	bls.n	80a0766 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0784:	f7ff ffd2 	bl	80a072c <_ZN5Print5writeEPKc>
}
 80a0788:	b00b      	add	sp, #44	; 0x2c
 80a078a:	bd30      	pop	{r4, r5, pc}

080a078c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a078c:	2200      	movs	r2, #0
 80a078e:	4b01      	ldr	r3, [pc, #4]	; (80a0794 <_GLOBAL__sub_I_RGB+0x8>)
 80a0790:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0792:	4770      	bx	lr
 80a0794:	2000007c 	.word	0x2000007c

080a0798 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0798:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a079a:	2600      	movs	r6, #0
 80a079c:	4604      	mov	r4, r0
 80a079e:	460d      	mov	r5, r1
 80a07a0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a07a4:	f7ff fcbe 	bl	80a0124 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a07a8:	4628      	mov	r0, r5
    _spi = spi;
 80a07aa:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a07ac:	f7ff fd2c 	bl	80a0208 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a07b0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a07b2:	6066      	str	r6, [r4, #4]
}
 80a07b4:	bd70      	pop	{r4, r5, r6, pc}

080a07b6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a07b6:	b510      	push	{r4, lr}
 80a07b8:	4604      	mov	r4, r0
{
	free(buffer);
 80a07ba:	6800      	ldr	r0, [r0, #0]
 80a07bc:	f7ff fe40 	bl	80a0440 <free>
}
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	bd10      	pop	{r4, pc}

080a07c4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a07c4:	b510      	push	{r4, lr}
 80a07c6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a07c8:	6800      	ldr	r0, [r0, #0]
 80a07ca:	b108      	cbz	r0, 80a07d0 <_ZN6String10invalidateEv+0xc>
 80a07cc:	f7ff fe38 	bl	80a0440 <free>
	buffer = NULL;
 80a07d0:	2300      	movs	r3, #0
	capacity = len = 0;
 80a07d2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a07d6:	6023      	str	r3, [r4, #0]
}
 80a07d8:	bd10      	pop	{r4, pc}

080a07da <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a07da:	b538      	push	{r3, r4, r5, lr}
 80a07dc:	4604      	mov	r4, r0
 80a07de:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a07e0:	6800      	ldr	r0, [r0, #0]
 80a07e2:	3101      	adds	r1, #1
 80a07e4:	f7ff fe34 	bl	80a0450 <realloc>
	if (newbuffer) {
 80a07e8:	b110      	cbz	r0, 80a07f0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a07ea:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a07ee:	2001      	movs	r0, #1
	}
	return 0;
}
 80a07f0:	bd38      	pop	{r3, r4, r5, pc}

080a07f2 <_ZN6String7reserveEj>:
{
 80a07f2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a07f4:	6803      	ldr	r3, [r0, #0]
{
 80a07f6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a07f8:	b123      	cbz	r3, 80a0804 <_ZN6String7reserveEj+0x12>
 80a07fa:	6843      	ldr	r3, [r0, #4]
 80a07fc:	428b      	cmp	r3, r1
 80a07fe:	d301      	bcc.n	80a0804 <_ZN6String7reserveEj+0x12>
 80a0800:	2001      	movs	r0, #1
}
 80a0802:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0804:	4620      	mov	r0, r4
 80a0806:	f7ff ffe8 	bl	80a07da <_ZN6String12changeBufferEj>
 80a080a:	2800      	cmp	r0, #0
 80a080c:	d0f9      	beq.n	80a0802 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a080e:	68a3      	ldr	r3, [r4, #8]
 80a0810:	2b00      	cmp	r3, #0
 80a0812:	d1f5      	bne.n	80a0800 <_ZN6String7reserveEj+0xe>
 80a0814:	6822      	ldr	r2, [r4, #0]
 80a0816:	7013      	strb	r3, [r2, #0]
 80a0818:	e7f2      	b.n	80a0800 <_ZN6String7reserveEj+0xe>

080a081a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a081a:	b570      	push	{r4, r5, r6, lr}
 80a081c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a081e:	4611      	mov	r1, r2
{
 80a0820:	4604      	mov	r4, r0
 80a0822:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0824:	f7ff ffe5 	bl	80a07f2 <_ZN6String7reserveEj>
 80a0828:	b920      	cbnz	r0, 80a0834 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a082a:	4620      	mov	r0, r4
 80a082c:	f7ff ffca 	bl	80a07c4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0830:	4620      	mov	r0, r4
 80a0832:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0834:	462a      	mov	r2, r5
 80a0836:	4631      	mov	r1, r6
 80a0838:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a083a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a083c:	f000 fb8c 	bl	80a0f58 <memcpy>
	buffer[len] = 0;
 80a0840:	2100      	movs	r1, #0
 80a0842:	6822      	ldr	r2, [r4, #0]
 80a0844:	68a3      	ldr	r3, [r4, #8]
 80a0846:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0848:	e7f2      	b.n	80a0830 <_ZN6String4copyEPKcj+0x16>

080a084a <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a084a:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a084c:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a084e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0850:	460d      	mov	r5, r1
	capacity = 0;
 80a0852:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0856:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0858:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a085a:	b139      	cbz	r1, 80a086c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a085c:	4608      	mov	r0, r1
 80a085e:	f000 fbc9 	bl	80a0ff4 <strlen>
 80a0862:	4629      	mov	r1, r5
 80a0864:	4602      	mov	r2, r0
 80a0866:	4620      	mov	r0, r4
 80a0868:	f7ff ffd7 	bl	80a081a <_ZN6String4copyEPKcj>
}
 80a086c:	4620      	mov	r0, r4
 80a086e:	bd38      	pop	{r3, r4, r5, pc}

080a0870 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0870:	4288      	cmp	r0, r1
{
 80a0872:	b510      	push	{r4, lr}
 80a0874:	460b      	mov	r3, r1
 80a0876:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0878:	d004      	beq.n	80a0884 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a087a:	6809      	ldr	r1, [r1, #0]
 80a087c:	b121      	cbz	r1, 80a0888 <_ZN6StringaSERKS_+0x18>
 80a087e:	689a      	ldr	r2, [r3, #8]
 80a0880:	f7ff ffcb 	bl	80a081a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0884:	4620      	mov	r0, r4
 80a0886:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0888:	f7ff ff9c 	bl	80a07c4 <_ZN6String10invalidateEv>
 80a088c:	e7fa      	b.n	80a0884 <_ZN6StringaSERKS_+0x14>

080a088e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a088e:	2300      	movs	r3, #0
String::String(const String &value)
 80a0890:	b510      	push	{r4, lr}
 80a0892:	4604      	mov	r4, r0
	capacity = 0;
 80a0894:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0898:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a089a:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a089c:	f7ff ffe8 	bl	80a0870 <_ZN6StringaSERKS_>
}
 80a08a0:	4620      	mov	r0, r4
 80a08a2:	bd10      	pop	{r4, pc}

080a08a4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a08a4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a08a6:	6882      	ldr	r2, [r0, #8]
 80a08a8:	b93a      	cbnz	r2, 80a08ba <_ZNK6String6equalsEPKc+0x16>
 80a08aa:	b121      	cbz	r1, 80a08b6 <_ZNK6String6equalsEPKc+0x12>
 80a08ac:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a08ae:	fab0 f080 	clz	r0, r0
 80a08b2:	0940      	lsrs	r0, r0, #5
 80a08b4:	e000      	b.n	80a08b8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a08b6:	2001      	movs	r0, #1
}
 80a08b8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a08ba:	6800      	ldr	r0, [r0, #0]
 80a08bc:	b909      	cbnz	r1, 80a08c2 <_ZNK6String6equalsEPKc+0x1e>
 80a08be:	7800      	ldrb	r0, [r0, #0]
 80a08c0:	e7f5      	b.n	80a08ae <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a08c2:	f000 fb8d 	bl	80a0fe0 <strcmp>
 80a08c6:	e7f2      	b.n	80a08ae <_ZNK6String6equalsEPKc+0xa>

080a08c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a08c8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a08ca:	2000      	movs	r0, #0
 80a08cc:	4b04      	ldr	r3, [pc, #16]	; (80a08e0 <_GLOBAL__sub_I_System+0x18>)
 80a08ce:	601a      	str	r2, [r3, #0]
 80a08d0:	4b04      	ldr	r3, [pc, #16]	; (80a08e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a08d2:	4a05      	ldr	r2, [pc, #20]	; (80a08e8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a08d4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a08d8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a08da:	f7ff bd1d 	b.w	80a0318 <set_system_mode>
 80a08de:	bf00      	nop
 80a08e0:	20000098 	.word	0x20000098
 80a08e4:	2000008c 	.word	0x2000008c
 80a08e8:	ffff0000 	.word	0xffff0000

080a08ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08ec:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08ee:	681a      	ldr	r2, [r3, #0]
 80a08f0:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08f2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a08f4:	4770      	bx	lr
 80a08f6:	bf00      	nop
 80a08f8:	20000004 	.word	0x20000004
 80a08fc:	2000009c 	.word	0x2000009c

080a0900 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0900:	4770      	bx	lr

080a0902 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0902:	7441      	strb	r1, [r0, #17]
}
 80a0904:	4770      	bx	lr

080a0906 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0906:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0908:	7c00      	ldrb	r0, [r0, #16]
 80a090a:	f7ff fcbd 	bl	80a0288 <hal_usart_available_data_for_write>
}
 80a090e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0912:	bd08      	pop	{r3, pc}

080a0914 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0914:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0916:	7c00      	ldrb	r0, [r0, #16]
 80a0918:	f7ff fc8e 	bl	80a0238 <hal_usart_available>
}
 80a091c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0920:	bd08      	pop	{r3, pc}

080a0922 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0922:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0924:	7c00      	ldrb	r0, [r0, #16]
 80a0926:	f7ff fc97 	bl	80a0258 <hal_usart_peek>
}
 80a092a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a092e:	bd08      	pop	{r3, pc}

080a0930 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0930:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0932:	7c00      	ldrb	r0, [r0, #16]
 80a0934:	f7ff fc88 	bl	80a0248 <hal_usart_read>
}
 80a0938:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a093c:	bd08      	pop	{r3, pc}

080a093e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a093e:	7c00      	ldrb	r0, [r0, #16]
 80a0940:	f7ff bc92 	b.w	80a0268 <hal_usart_flush>

080a0944 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0944:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0946:	7c46      	ldrb	r6, [r0, #17]
{
 80a0948:	4604      	mov	r4, r0
 80a094a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a094c:	b12e      	cbz	r6, 80a095a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a094e:	4629      	mov	r1, r5
 80a0950:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0956:	f7ff bc67 	b.w	80a0228 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a095a:	7c00      	ldrb	r0, [r0, #16]
 80a095c:	f7ff fc94 	bl	80a0288 <hal_usart_available_data_for_write>
 80a0960:	2800      	cmp	r0, #0
 80a0962:	dcf4      	bgt.n	80a094e <_ZN11USARTSerial5writeEh+0xa>
}
 80a0964:	4630      	mov	r0, r6
 80a0966:	bd70      	pop	{r4, r5, r6, pc}

080a0968 <_ZN11USARTSerialD0Ev>:
 80a0968:	b510      	push	{r4, lr}
 80a096a:	4604      	mov	r4, r0
 80a096c:	2114      	movs	r1, #20
 80a096e:	f7ff fb94 	bl	80a009a <_ZdlPvj>
 80a0972:	4620      	mov	r0, r4
 80a0974:	bd10      	pop	{r4, pc}
	...

080a0978 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0978:	b510      	push	{r4, lr}
 80a097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a097e:	4604      	mov	r4, r0
 80a0980:	4608      	mov	r0, r1
 80a0982:	4611      	mov	r1, r2
 80a0984:	2200      	movs	r2, #0
 80a0986:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a098a:	4b04      	ldr	r3, [pc, #16]	; (80a099c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a098c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a098e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0990:	2301      	movs	r3, #1
 80a0992:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a0994:	f7ff fc80 	bl	80a0298 <hal_usart_init_ex>
}
 80a0998:	4620      	mov	r0, r4
 80a099a:	bd10      	pop	{r4, pc}
 80a099c:	080a1198 	.word	0x080a1198

080a09a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a09a0:	7441      	strb	r1, [r0, #17]
}
 80a09a2:	4770      	bx	lr

080a09a4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09a4:	4770      	bx	lr

080a09a6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a09a6:	4770      	bx	lr

080a09a8 <_ZN9USBSerial4readEv>:
{
 80a09a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a09aa:	2100      	movs	r1, #0
 80a09ac:	7c00      	ldrb	r0, [r0, #16]
 80a09ae:	f7ff fc93 	bl	80a02d8 <HAL_USB_USART_Receive_Data>
}
 80a09b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09b6:	bd08      	pop	{r3, pc}

080a09b8 <_ZN9USBSerial4peekEv>:
{
 80a09b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a09ba:	2101      	movs	r1, #1
 80a09bc:	7c00      	ldrb	r0, [r0, #16]
 80a09be:	f7ff fc8b 	bl	80a02d8 <HAL_USB_USART_Receive_Data>
}
 80a09c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09c6:	bd08      	pop	{r3, pc}

080a09c8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a09c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a09ca:	7c00      	ldrb	r0, [r0, #16]
 80a09cc:	f7ff fc7c 	bl	80a02c8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a09d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09d4:	bd08      	pop	{r3, pc}

080a09d6 <_ZN9USBSerial9availableEv>:
{
 80a09d6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a09d8:	7c00      	ldrb	r0, [r0, #16]
 80a09da:	f7ff fc6d 	bl	80a02b8 <HAL_USB_USART_Available_Data>
}
 80a09de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09e2:	bd08      	pop	{r3, pc}

080a09e4 <_ZN9USBSerial5writeEh>:
{
 80a09e4:	b538      	push	{r3, r4, r5, lr}
 80a09e6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a09e8:	7c00      	ldrb	r0, [r0, #16]
{
 80a09ea:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a09ec:	f7ff fc6c 	bl	80a02c8 <HAL_USB_USART_Available_Data_For_Write>
 80a09f0:	2800      	cmp	r0, #0
 80a09f2:	dc01      	bgt.n	80a09f8 <_ZN9USBSerial5writeEh+0x14>
 80a09f4:	7c60      	ldrb	r0, [r4, #17]
 80a09f6:	b128      	cbz	r0, 80a0a04 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a09f8:	4629      	mov	r1, r5
 80a09fa:	7c20      	ldrb	r0, [r4, #16]
 80a09fc:	f7ff fc74 	bl	80a02e8 <HAL_USB_USART_Send_Data>
 80a0a00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0a04:	bd38      	pop	{r3, r4, r5, pc}

080a0a06 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0a06:	7c00      	ldrb	r0, [r0, #16]
 80a0a08:	f7ff bc76 	b.w	80a02f8 <HAL_USB_USART_Flush_Data>

080a0a0c <_ZN9USBSerialD0Ev>:
 80a0a0c:	b510      	push	{r4, lr}
 80a0a0e:	4604      	mov	r4, r0
 80a0a10:	2114      	movs	r1, #20
 80a0a12:	f7ff fb42 	bl	80a009a <_ZdlPvj>
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	bd10      	pop	{r4, pc}

080a0a1a <__tcf_1>:
 80a0a1a:	4770      	bx	lr

080a0a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a1c:	b510      	push	{r4, lr}
 80a0a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a22:	4604      	mov	r4, r0
 80a0a24:	4608      	mov	r0, r1
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a2c:	4b04      	ldr	r3, [pc, #16]	; (80a0a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0a2e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a30:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0a32:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0a34:	4611      	mov	r1, r2
  _blocking = true;
 80a0a36:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0a38:	f7ff fc36 	bl	80a02a8 <HAL_USB_USART_Init>
}
 80a0a3c:	4620      	mov	r0, r4
 80a0a3e:	bd10      	pop	{r4, pc}
 80a0a40:	080a11c8 	.word	0x080a11c8

080a0a44 <_Z19acquireSerialBufferv>:
{
 80a0a44:	b510      	push	{r4, lr}
 80a0a46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0a48:	2214      	movs	r2, #20
 80a0a4a:	2100      	movs	r1, #0
 80a0a4c:	f000 fa92 	bl	80a0f74 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0a50:	4b05      	ldr	r3, [pc, #20]	; (80a0a68 <_Z19acquireSerialBufferv+0x24>)
}
 80a0a52:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0a54:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0a56:	4b05      	ldr	r3, [pc, #20]	; (80a0a6c <_Z19acquireSerialBufferv+0x28>)
 80a0a58:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a5a:	f240 1301 	movw	r3, #257	; 0x101
 80a0a5e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a60:	2381      	movs	r3, #129	; 0x81
 80a0a62:	8223      	strh	r3, [r4, #16]
}
 80a0a64:	bd10      	pop	{r4, pc}
 80a0a66:	bf00      	nop
 80a0a68:	200000d0 	.word	0x200000d0
 80a0a6c:	200001d1 	.word	0x200001d1

080a0a70 <_Z16_fetch_usbserialv>:
{
 80a0a70:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a72:	4d0e      	ldr	r5, [pc, #56]	; (80a0aac <_Z16_fetch_usbserialv+0x3c>)
{
 80a0a74:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0a76:	a801      	add	r0, sp, #4
 80a0a78:	f7ff ffe4 	bl	80a0a44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a7c:	7829      	ldrb	r1, [r5, #0]
 80a0a7e:	f3bf 8f5b 	dmb	ish
 80a0a82:	f011 0401 	ands.w	r4, r1, #1
 80a0a86:	d10e      	bne.n	80a0aa6 <_Z16_fetch_usbserialv+0x36>
 80a0a88:	4628      	mov	r0, r5
 80a0a8a:	f7ff fb08 	bl	80a009e <__cxa_guard_acquire>
 80a0a8e:	b150      	cbz	r0, 80a0aa6 <_Z16_fetch_usbserialv+0x36>
 80a0a90:	4621      	mov	r1, r4
 80a0a92:	aa01      	add	r2, sp, #4
 80a0a94:	4806      	ldr	r0, [pc, #24]	; (80a0ab0 <_Z16_fetch_usbserialv+0x40>)
 80a0a96:	f7ff ffc1 	bl	80a0a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a9a:	4628      	mov	r0, r5
 80a0a9c:	f7ff fb04 	bl	80a00a8 <__cxa_guard_release>
 80a0aa0:	4804      	ldr	r0, [pc, #16]	; (80a0ab4 <_Z16_fetch_usbserialv+0x44>)
 80a0aa2:	f000 fa53 	bl	80a0f4c <atexit>
	return _usbserial;
}
 80a0aa6:	4802      	ldr	r0, [pc, #8]	; (80a0ab0 <_Z16_fetch_usbserialv+0x40>)
 80a0aa8:	b007      	add	sp, #28
 80a0aaa:	bd30      	pop	{r4, r5, pc}
 80a0aac:	200000a0 	.word	0x200000a0
 80a0ab0:	200000a8 	.word	0x200000a8
 80a0ab4:	080a09a5 	.word	0x080a09a5

080a0ab8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ab8:	b510      	push	{r4, lr}
 80a0aba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0abc:	2214      	movs	r2, #20
 80a0abe:	2100      	movs	r1, #0
 80a0ac0:	f000 fa58 	bl	80a0f74 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ac4:	4b05      	ldr	r3, [pc, #20]	; (80a0adc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ac6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ac8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0aca:	4b05      	ldr	r3, [pc, #20]	; (80a0ae0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0acc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ace:	f240 1301 	movw	r3, #257	; 0x101
 80a0ad2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ad4:	2381      	movs	r3, #129	; 0x81
 80a0ad6:	8223      	strh	r3, [r4, #16]
}
 80a0ad8:	bd10      	pop	{r4, pc}
 80a0ada:	bf00      	nop
 80a0adc:	20000252 	.word	0x20000252
 80a0ae0:	20000353 	.word	0x20000353

080a0ae4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0ae4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0ae6:	4c0e      	ldr	r4, [pc, #56]	; (80a0b20 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0ae8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0aea:	a801      	add	r0, sp, #4
 80a0aec:	f7ff ffe4 	bl	80a0ab8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0af0:	7823      	ldrb	r3, [r4, #0]
 80a0af2:	f3bf 8f5b 	dmb	ish
 80a0af6:	07db      	lsls	r3, r3, #31
 80a0af8:	d40e      	bmi.n	80a0b18 <_Z17_fetch_usbserial1v+0x34>
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	f7ff facf 	bl	80a009e <__cxa_guard_acquire>
 80a0b00:	b150      	cbz	r0, 80a0b18 <_Z17_fetch_usbserial1v+0x34>
 80a0b02:	2101      	movs	r1, #1
 80a0b04:	aa01      	add	r2, sp, #4
 80a0b06:	4807      	ldr	r0, [pc, #28]	; (80a0b24 <_Z17_fetch_usbserial1v+0x40>)
 80a0b08:	f7ff ff88 	bl	80a0a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f7ff facb 	bl	80a00a8 <__cxa_guard_release>
 80a0b12:	4805      	ldr	r0, [pc, #20]	; (80a0b28 <_Z17_fetch_usbserial1v+0x44>)
 80a0b14:	f000 fa1a 	bl	80a0f4c <atexit>
  return _usbserial1;
}
 80a0b18:	4802      	ldr	r0, [pc, #8]	; (80a0b24 <_Z17_fetch_usbserial1v+0x40>)
 80a0b1a:	b006      	add	sp, #24
 80a0b1c:	bd10      	pop	{r4, pc}
 80a0b1e:	bf00      	nop
 80a0b20:	200000a4 	.word	0x200000a4
 80a0b24:	200000bc 	.word	0x200000bc
 80a0b28:	080a0a1b 	.word	0x080a0a1b

080a0b2c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0b2c:	2200      	movs	r2, #0
 80a0b2e:	6840      	ldr	r0, [r0, #4]
 80a0b30:	4611      	mov	r1, r2
 80a0b32:	f7ff bc35 	b.w	80a03a0 <network_ready>

080a0b36 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a0b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b38:	4615      	mov	r5, r2
 80a0b3a:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a0b3c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0b3e:	460e      	mov	r6, r1
 80a0b40:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0b42:	2100      	movs	r1, #0
 80a0b44:	a803      	add	r0, sp, #12
 80a0b46:	f000 fa15 	bl	80a0f74 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0b4a:	4628      	mov	r0, r5
 80a0b4c:	f000 fa52 	bl	80a0ff4 <strlen>
 80a0b50:	2700      	movs	r7, #0
 80a0b52:	b281      	uxth	r1, r0
 80a0b54:	6873      	ldr	r3, [r6, #4]
 80a0b56:	4628      	mov	r0, r5
 80a0b58:	9700      	str	r7, [sp, #0]
 80a0b5a:	aa03      	add	r2, sp, #12
 80a0b5c:	f7ff fbd4 	bl	80a0308 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b60:	b130      	cbz	r0, 80a0b70 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0b62:	4639      	mov	r1, r7
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff fd33 	bl	80a05d0 <_ZN9IPAddressC1Em>
    }
 80a0b6a:	4620      	mov	r0, r4
 80a0b6c:	b009      	add	sp, #36	; 0x24
 80a0b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b70:	4620      	mov	r0, r4
 80a0b72:	a903      	add	r1, sp, #12
 80a0b74:	f7ff fd1a 	bl	80a05ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0b78:	e7f7      	b.n	80a0b6a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0b7a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0b7a:	2200      	movs	r2, #0
 80a0b7c:	6840      	ldr	r0, [r0, #4]
 80a0b7e:	4611      	mov	r1, r2
 80a0b80:	f7ff bc2e 	b.w	80a03e0 <network_listening>

080a0b84 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0b84:	2200      	movs	r2, #0
 80a0b86:	6840      	ldr	r0, [r0, #4]
 80a0b88:	4611      	mov	r1, r2
 80a0b8a:	f7ff bc39 	b.w	80a0400 <network_get_listen_timeout>

080a0b8e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0b8e:	2200      	movs	r2, #0
 80a0b90:	6840      	ldr	r0, [r0, #4]
 80a0b92:	f7ff bc2d 	b.w	80a03f0 <network_set_listen_timeout>

080a0b96 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0b96:	2200      	movs	r2, #0
 80a0b98:	6840      	ldr	r0, [r0, #4]
 80a0b9a:	f081 0101 	eor.w	r1, r1, #1
 80a0b9e:	f7ff bc17 	b.w	80a03d0 <network_listen>

080a0ba2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0ba2:	2300      	movs	r3, #0
 80a0ba4:	6840      	ldr	r0, [r0, #4]
 80a0ba6:	461a      	mov	r2, r3
 80a0ba8:	4619      	mov	r1, r3
 80a0baa:	f7ff bc09 	b.w	80a03c0 <network_off>

080a0bae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0bae:	2300      	movs	r3, #0
 80a0bb0:	6840      	ldr	r0, [r0, #4]
 80a0bb2:	461a      	mov	r2, r3
 80a0bb4:	4619      	mov	r1, r3
 80a0bb6:	f7ff bbfb 	b.w	80a03b0 <network_on>

080a0bba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0bba:	2200      	movs	r2, #0
 80a0bbc:	6840      	ldr	r0, [r0, #4]
 80a0bbe:	4611      	mov	r1, r2
 80a0bc0:	f7ff bbde 	b.w	80a0380 <network_connecting>

080a0bc4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0bc4:	2200      	movs	r2, #0
 80a0bc6:	2102      	movs	r1, #2
 80a0bc8:	6840      	ldr	r0, [r0, #4]
 80a0bca:	f7ff bbe1 	b.w	80a0390 <network_disconnect>

080a0bce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0bce:	2300      	movs	r3, #0
 80a0bd0:	6840      	ldr	r0, [r0, #4]
 80a0bd2:	461a      	mov	r2, r3
 80a0bd4:	f7ff bbcc 	b.w	80a0370 <network_connect>

080a0bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0bd8:	2204      	movs	r2, #4
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0bdc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0bde:	4a02      	ldr	r2, [pc, #8]	; (80a0be8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0be0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0be2:	4770      	bx	lr
 80a0be4:	200003d4 	.word	0x200003d4
 80a0be8:	080a11f8 	.word	0x080a11f8

080a0bec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0bec:	4b01      	ldr	r3, [pc, #4]	; (80a0bf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0bee:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0bf0:	4770      	bx	lr
 80a0bf2:	bf00      	nop
 80a0bf4:	20000008 	.word	0x20000008

080a0bf8 <serialEventRun>:
{
 80a0bf8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0bfa:	4b13      	ldr	r3, [pc, #76]	; (80a0c48 <serialEventRun+0x50>)
 80a0bfc:	b143      	cbz	r3, 80a0c10 <serialEventRun+0x18>
 80a0bfe:	f7ff ff37 	bl	80a0a70 <_Z16_fetch_usbserialv>
 80a0c02:	6803      	ldr	r3, [r0, #0]
 80a0c04:	691b      	ldr	r3, [r3, #16]
 80a0c06:	4798      	blx	r3
 80a0c08:	2800      	cmp	r0, #0
 80a0c0a:	dd01      	ble.n	80a0c10 <serialEventRun+0x18>
        serialEvent();
 80a0c0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0c10:	4b0e      	ldr	r3, [pc, #56]	; (80a0c4c <serialEventRun+0x54>)
 80a0c12:	b143      	cbz	r3, 80a0c26 <serialEventRun+0x2e>
 80a0c14:	f000 f974 	bl	80a0f00 <_Z22__fetch_global_Serial1v>
 80a0c18:	6803      	ldr	r3, [r0, #0]
 80a0c1a:	691b      	ldr	r3, [r3, #16]
 80a0c1c:	4798      	blx	r3
 80a0c1e:	2800      	cmp	r0, #0
 80a0c20:	dd01      	ble.n	80a0c26 <serialEventRun+0x2e>
        serialEvent1();
 80a0c22:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0c26:	4b0a      	ldr	r3, [pc, #40]	; (80a0c50 <serialEventRun+0x58>)
 80a0c28:	b10b      	cbz	r3, 80a0c2e <serialEventRun+0x36>
 80a0c2a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c2e:	4b09      	ldr	r3, [pc, #36]	; (80a0c54 <serialEventRun+0x5c>)
 80a0c30:	b143      	cbz	r3, 80a0c44 <serialEventRun+0x4c>
 80a0c32:	f7ff ff57 	bl	80a0ae4 <_Z17_fetch_usbserial1v>
 80a0c36:	6803      	ldr	r3, [r0, #0]
 80a0c38:	691b      	ldr	r3, [r3, #16]
 80a0c3a:	4798      	blx	r3
 80a0c3c:	2800      	cmp	r0, #0
 80a0c3e:	dd01      	ble.n	80a0c44 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0c40:	f3af 8000 	nop.w
}
 80a0c44:	bd08      	pop	{r3, pc}
 80a0c46:	bf00      	nop
	...

080a0c58 <_post_loop>:
{
 80a0c58:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c5a:	f7ff ffcd 	bl	80a0bf8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c5e:	f7ff fa79 	bl	80a0154 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c62:	4b01      	ldr	r3, [pc, #4]	; (80a0c68 <_post_loop+0x10>)
 80a0c64:	6018      	str	r0, [r3, #0]
}
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	200003f4 	.word	0x200003f4

080a0c6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c6c:	4805      	ldr	r0, [pc, #20]	; (80a0c84 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0c6e:	4a06      	ldr	r2, [pc, #24]	; (80a0c88 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0c70:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c72:	1a12      	subs	r2, r2, r0
 80a0c74:	4905      	ldr	r1, [pc, #20]	; (80a0c8c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0c76:	f000 f96f 	bl	80a0f58 <memcpy>
    __backup_sram_signature = signature;
 80a0c7a:	4b05      	ldr	r3, [pc, #20]	; (80a0c90 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0c7c:	4a05      	ldr	r2, [pc, #20]	; (80a0c94 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0c7e:	601a      	str	r2, [r3, #0]
}
 80a0c80:	bd08      	pop	{r3, pc}
 80a0c82:	bf00      	nop
 80a0c84:	40024000 	.word	0x40024000
 80a0c88:	40024004 	.word	0x40024004
 80a0c8c:	080a12c0 	.word	0x080a12c0
 80a0c90:	40024000 	.word	0x40024000
 80a0c94:	9a271c1e 	.word	0x9a271c1e

080a0c98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c98:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c9a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c9c:	461a      	mov	r2, r3
 80a0c9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ca2:	9300      	str	r3, [sp, #0]
 80a0ca4:	f7ff fb4a 	bl	80a033c <system_ctrl_set_result>
}
 80a0ca8:	b003      	add	sp, #12
 80a0caa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0cb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0cb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0cb2:	8843      	ldrh	r3, [r0, #2]
 80a0cb4:	2b0a      	cmp	r3, #10
 80a0cb6:	d008      	beq.n	80a0cca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0cb8:	2b50      	cmp	r3, #80	; 0x50
 80a0cba:	d10b      	bne.n	80a0cd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0cbc:	4b09      	ldr	r3, [pc, #36]	; (80a0ce4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0cbe:	681b      	ldr	r3, [r3, #0]
 80a0cc0:	b14b      	cbz	r3, 80a0cd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0cc2:	b003      	add	sp, #12
 80a0cc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0cc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0cca:	f7ff ffe5 	bl	80a0c98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0cce:	b003      	add	sp, #12
 80a0cd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cd4:	2300      	movs	r3, #0
 80a0cd6:	461a      	mov	r2, r3
 80a0cd8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cdc:	9300      	str	r3, [sp, #0]
 80a0cde:	f7ff fb2d 	bl	80a033c <system_ctrl_set_result>
}
 80a0ce2:	e7f4      	b.n	80a0cce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0ce4:	200003e0 	.word	0x200003e0

080a0ce8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0ce8:	2100      	movs	r1, #0
{
 80a0cea:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0cec:	4811      	ldr	r0, [pc, #68]	; (80a0d34 <module_user_init_hook+0x4c>)
 80a0cee:	f7ff fbbf 	bl	80a0470 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0cf2:	4b11      	ldr	r3, [pc, #68]	; (80a0d38 <module_user_init_hook+0x50>)
 80a0cf4:	681a      	ldr	r2, [r3, #0]
 80a0cf6:	4b11      	ldr	r3, [pc, #68]	; (80a0d3c <module_user_init_hook+0x54>)
 80a0cf8:	429a      	cmp	r2, r3
 80a0cfa:	bf0c      	ite	eq
 80a0cfc:	2201      	moveq	r2, #1
 80a0cfe:	2200      	movne	r2, #0
 80a0d00:	4b0f      	ldr	r3, [pc, #60]	; (80a0d40 <module_user_init_hook+0x58>)
 80a0d02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0d04:	d001      	beq.n	80a0d0a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0d06:	f7ff ffb1 	bl	80a0c6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d0a:	f7ff fa1b 	bl	80a0144 <HAL_RNG_GetRandomNumber>
 80a0d0e:	4604      	mov	r4, r0
    srand(seed);
 80a0d10:	f000 f938 	bl	80a0f84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d14:	4b0b      	ldr	r3, [pc, #44]	; (80a0d44 <module_user_init_hook+0x5c>)
 80a0d16:	b113      	cbz	r3, 80a0d1e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d1e:	2100      	movs	r1, #0
 80a0d20:	4808      	ldr	r0, [pc, #32]	; (80a0d44 <module_user_init_hook+0x5c>)
 80a0d22:	f7ff fb1d 	bl	80a0360 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d2a:	2100      	movs	r1, #0
 80a0d2c:	4806      	ldr	r0, [pc, #24]	; (80a0d48 <module_user_init_hook+0x60>)
 80a0d2e:	f7ff bafb 	b.w	80a0328 <system_ctrl_set_app_request_handler>
 80a0d32:	bf00      	nop
 80a0d34:	080a0bed 	.word	0x080a0bed
 80a0d38:	40024000 	.word	0x40024000
 80a0d3c:	9a271c1e 	.word	0x9a271c1e
 80a0d40:	200003dc 	.word	0x200003dc
 80a0d44:	00000000 	.word	0x00000000
 80a0d48:	080a0cb1 	.word	0x080a0cb1

080a0d4c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0d4c:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <__tcf_0+0xc>)
 80a0d4e:	6898      	ldr	r0, [r3, #8]
 80a0d50:	b108      	cbz	r0, 80a0d56 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0d52:	f7ff b9ef 	b.w	80a0134 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0d56:	4770      	bx	lr
 80a0d58:	200003e8 	.word	0x200003e8

080a0d5c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0d5c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0d5e:	b570      	push	{r4, r5, r6, lr}
 80a0d60:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0d62:	d901      	bls.n	80a0d68 <pinAvailable+0xc>
    return false;
 80a0d64:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0d66:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0d68:	f1a0 030d 	sub.w	r3, r0, #13
 80a0d6c:	2b02      	cmp	r3, #2
 80a0d6e:	d90b      	bls.n	80a0d88 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0d70:	2801      	cmp	r0, #1
 80a0d72:	d824      	bhi.n	80a0dbe <pinAvailable+0x62>
 80a0d74:	f000 f876 	bl	80a0e64 <_Z19__fetch_global_Wirev>
 80a0d78:	2100      	movs	r1, #0
 80a0d7a:	7c00      	ldrb	r0, [r0, #16]
 80a0d7c:	f7ff fa32 	bl	80a01e4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0d80:	f080 0001 	eor.w	r0, r0, #1
 80a0d84:	b2c0      	uxtb	r0, r0
 80a0d86:	e7ee      	b.n	80a0d66 <pinAvailable+0xa>
 80a0d88:	4e12      	ldr	r6, [pc, #72]	; (80a0dd4 <pinAvailable+0x78>)
 80a0d8a:	7831      	ldrb	r1, [r6, #0]
 80a0d8c:	f3bf 8f5b 	dmb	ish
 80a0d90:	f011 0501 	ands.w	r5, r1, #1
 80a0d94:	d10d      	bne.n	80a0db2 <pinAvailable+0x56>
 80a0d96:	4630      	mov	r0, r6
 80a0d98:	f7ff f981 	bl	80a009e <__cxa_guard_acquire>
 80a0d9c:	b148      	cbz	r0, 80a0db2 <pinAvailable+0x56>
 80a0d9e:	4629      	mov	r1, r5
 80a0da0:	480d      	ldr	r0, [pc, #52]	; (80a0dd8 <pinAvailable+0x7c>)
 80a0da2:	f7ff fcf9 	bl	80a0798 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0da6:	4630      	mov	r0, r6
 80a0da8:	f7ff f97e 	bl	80a00a8 <__cxa_guard_release>
 80a0dac:	480b      	ldr	r0, [pc, #44]	; (80a0ddc <pinAvailable+0x80>)
 80a0dae:	f000 f8cd 	bl	80a0f4c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0db2:	4b09      	ldr	r3, [pc, #36]	; (80a0dd8 <pinAvailable+0x7c>)
 80a0db4:	7818      	ldrb	r0, [r3, #0]
 80a0db6:	f7ff fa2f 	bl	80a0218 <hal_spi_is_enabled>
 80a0dba:	2800      	cmp	r0, #0
 80a0dbc:	d1d2      	bne.n	80a0d64 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0dbe:	3c12      	subs	r4, #18
 80a0dc0:	2c01      	cmp	r4, #1
 80a0dc2:	d805      	bhi.n	80a0dd0 <pinAvailable+0x74>
 80a0dc4:	f000 f89c 	bl	80a0f00 <_Z22__fetch_global_Serial1v>
 80a0dc8:	7c00      	ldrb	r0, [r0, #16]
 80a0dca:	f7ff fa55 	bl	80a0278 <hal_usart_is_enabled>
 80a0dce:	e7d7      	b.n	80a0d80 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0dd0:	2001      	movs	r0, #1
 80a0dd2:	e7c8      	b.n	80a0d66 <pinAvailable+0xa>
 80a0dd4:	200003e4 	.word	0x200003e4
 80a0dd8:	200003e8 	.word	0x200003e8
 80a0ddc:	080a0d4d 	.word	0x080a0d4d

080a0de0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0de0:	2817      	cmp	r0, #23
{
 80a0de2:	b538      	push	{r3, r4, r5, lr}
 80a0de4:	4604      	mov	r4, r0
 80a0de6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0de8:	d80a      	bhi.n	80a0e00 <pinMode+0x20>
 80a0dea:	29ff      	cmp	r1, #255	; 0xff
 80a0dec:	d008      	beq.n	80a0e00 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0dee:	f7ff ffb5 	bl	80a0d5c <pinAvailable>
 80a0df2:	b128      	cbz	r0, 80a0e00 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0df4:	4629      	mov	r1, r5
 80a0df6:	4620      	mov	r0, r4
}
 80a0df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0dfc:	f7ff b9b2 	b.w	80a0164 <HAL_Pin_Mode>
}
 80a0e00:	bd38      	pop	{r3, r4, r5, pc}

080a0e02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0e02:	b538      	push	{r3, r4, r5, lr}
 80a0e04:	4604      	mov	r4, r0
 80a0e06:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0e08:	f7ff f9b4 	bl	80a0174 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0e0c:	28ff      	cmp	r0, #255	; 0xff
 80a0e0e:	d010      	beq.n	80a0e32 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0e10:	2806      	cmp	r0, #6
 80a0e12:	d804      	bhi.n	80a0e1e <digitalWrite+0x1c>
 80a0e14:	234d      	movs	r3, #77	; 0x4d
 80a0e16:	fa23 f000 	lsr.w	r0, r3, r0
 80a0e1a:	07c3      	lsls	r3, r0, #31
 80a0e1c:	d409      	bmi.n	80a0e32 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e1e:	4620      	mov	r0, r4
 80a0e20:	f7ff ff9c 	bl	80a0d5c <pinAvailable>
 80a0e24:	b128      	cbz	r0, 80a0e32 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e26:	4629      	mov	r1, r5
 80a0e28:	4620      	mov	r0, r4
}
 80a0e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0e2e:	f7ff b9a9 	b.w	80a0184 <HAL_GPIO_Write>
}
 80a0e32:	bd38      	pop	{r3, r4, r5, pc}

080a0e34 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e34:	4770      	bx	lr
	...

080a0e38 <_Z17acquireWireBufferv>:
{
 80a0e38:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0e3a:	2314      	movs	r3, #20
 80a0e3c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e3e:	4e08      	ldr	r6, [pc, #32]	; (80a0e60 <_Z17acquireWireBufferv+0x28>)
{
 80a0e40:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0e42:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e44:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0e46:	6085      	str	r5, [r0, #8]
 80a0e48:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e4a:	4628      	mov	r0, r5
 80a0e4c:	f000 f87c 	bl	80a0f48 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e50:	4631      	mov	r1, r6
	};
 80a0e52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e54:	4628      	mov	r0, r5
 80a0e56:	f000 f877 	bl	80a0f48 <_ZnajRKSt9nothrow_t>
	};
 80a0e5a:	60e0      	str	r0, [r4, #12]
}
 80a0e5c:	4620      	mov	r0, r4
 80a0e5e:	bd70      	pop	{r4, r5, r6, pc}
 80a0e60:	080a122c 	.word	0x080a122c

080a0e64 <_Z19__fetch_global_Wirev>:
{
 80a0e64:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e66:	4d0e      	ldr	r5, [pc, #56]	; (80a0ea0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0e68:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e6a:	7829      	ldrb	r1, [r5, #0]
 80a0e6c:	f3bf 8f5b 	dmb	ish
 80a0e70:	f011 0401 	ands.w	r4, r1, #1
 80a0e74:	d111      	bne.n	80a0e9a <_Z19__fetch_global_Wirev+0x36>
 80a0e76:	4628      	mov	r0, r5
 80a0e78:	f7ff f911 	bl	80a009e <__cxa_guard_acquire>
 80a0e7c:	b168      	cbz	r0, 80a0e9a <_Z19__fetch_global_Wirev+0x36>
 80a0e7e:	a801      	add	r0, sp, #4
 80a0e80:	f7ff ffda 	bl	80a0e38 <_Z17acquireWireBufferv>
 80a0e84:	4621      	mov	r1, r4
 80a0e86:	aa01      	add	r2, sp, #4
 80a0e88:	4806      	ldr	r0, [pc, #24]	; (80a0ea4 <_Z19__fetch_global_Wirev+0x40>)
 80a0e8a:	f7ff fb4d 	bl	80a0528 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0e8e:	4628      	mov	r0, r5
 80a0e90:	f7ff f90a 	bl	80a00a8 <__cxa_guard_release>
 80a0e94:	4804      	ldr	r0, [pc, #16]	; (80a0ea8 <_Z19__fetch_global_Wirev+0x44>)
 80a0e96:	f000 f859 	bl	80a0f4c <atexit>
	return wire;
}
 80a0e9a:	4802      	ldr	r0, [pc, #8]	; (80a0ea4 <_Z19__fetch_global_Wirev+0x40>)
 80a0e9c:	b007      	add	sp, #28
 80a0e9e:	bd30      	pop	{r4, r5, pc}
 80a0ea0:	200003f8 	.word	0x200003f8
 80a0ea4:	200003fc 	.word	0x200003fc
 80a0ea8:	080a0e35 	.word	0x080a0e35

080a0eac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0eac:	2300      	movs	r3, #0
 80a0eae:	b507      	push	{r0, r1, r2, lr}
 80a0eb0:	461a      	mov	r2, r3
 80a0eb2:	4619      	mov	r1, r3
 80a0eb4:	9300      	str	r3, [sp, #0]
 80a0eb6:	4803      	ldr	r0, [pc, #12]	; (80a0ec4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0eb8:	f7ff fba0 	bl	80a05fc <_ZN9IPAddressC1Ehhhh>
 80a0ebc:	b003      	add	sp, #12
 80a0ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0ec2:	bf00      	nop
 80a0ec4:	20000410 	.word	0x20000410

080a0ec8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0ec8:	4770      	bx	lr
	...

080a0ecc <_Z20acquireSerial1Bufferv>:
{
 80a0ecc:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a0ece:	2514      	movs	r5, #20
{
 80a0ed0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a0ed2:	462a      	mov	r2, r5
 80a0ed4:	2100      	movs	r1, #0
 80a0ed6:	f000 f84d 	bl	80a0f74 <memset>
 80a0eda:	8025      	strh	r5, [r4, #0]
 80a0edc:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ede:	4e07      	ldr	r6, [pc, #28]	; (80a0efc <_Z20acquireSerial1Bufferv+0x30>)
 80a0ee0:	4628      	mov	r0, r5
 80a0ee2:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a0ee4:	8125      	strh	r5, [r4, #8]
 80a0ee6:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ee8:	f000 f82e 	bl	80a0f48 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0eec:	4631      	mov	r1, r6
    };
 80a0eee:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ef0:	4628      	mov	r0, r5
 80a0ef2:	f000 f829 	bl	80a0f48 <_ZnajRKSt9nothrow_t>
    };
 80a0ef6:	60e0      	str	r0, [r4, #12]
}
 80a0ef8:	4620      	mov	r0, r4
 80a0efa:	bd70      	pop	{r4, r5, r6, pc}
 80a0efc:	080a122c 	.word	0x080a122c

080a0f00 <_Z22__fetch_global_Serial1v>:
{
 80a0f00:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0f02:	4d0e      	ldr	r5, [pc, #56]	; (80a0f3c <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a0f04:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0f06:	7829      	ldrb	r1, [r5, #0]
 80a0f08:	f3bf 8f5b 	dmb	ish
 80a0f0c:	f011 0401 	ands.w	r4, r1, #1
 80a0f10:	d111      	bne.n	80a0f36 <_Z22__fetch_global_Serial1v+0x36>
 80a0f12:	4628      	mov	r0, r5
 80a0f14:	f7ff f8c3 	bl	80a009e <__cxa_guard_acquire>
 80a0f18:	b168      	cbz	r0, 80a0f36 <_Z22__fetch_global_Serial1v+0x36>
 80a0f1a:	a801      	add	r0, sp, #4
 80a0f1c:	f7ff ffd6 	bl	80a0ecc <_Z20acquireSerial1Bufferv>
 80a0f20:	4621      	mov	r1, r4
 80a0f22:	aa01      	add	r2, sp, #4
 80a0f24:	4806      	ldr	r0, [pc, #24]	; (80a0f40 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f26:	f7ff fd27 	bl	80a0978 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a0f2a:	4628      	mov	r0, r5
 80a0f2c:	f7ff f8bc 	bl	80a00a8 <__cxa_guard_release>
 80a0f30:	4804      	ldr	r0, [pc, #16]	; (80a0f44 <_Z22__fetch_global_Serial1v+0x44>)
 80a0f32:	f000 f80b 	bl	80a0f4c <atexit>
    return serial1;
}
 80a0f36:	4802      	ldr	r0, [pc, #8]	; (80a0f40 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f38:	b007      	add	sp, #28
 80a0f3a:	bd30      	pop	{r4, r5, pc}
 80a0f3c:	20000428 	.word	0x20000428
 80a0f40:	2000042c 	.word	0x2000042c
 80a0f44:	080a0ec9 	.word	0x080a0ec9

080a0f48 <_ZnajRKSt9nothrow_t>:
 80a0f48:	f7ff b8a5 	b.w	80a0096 <_Znaj>

080a0f4c <atexit>:
 80a0f4c:	2300      	movs	r3, #0
 80a0f4e:	4601      	mov	r1, r0
 80a0f50:	461a      	mov	r2, r3
 80a0f52:	4618      	mov	r0, r3
 80a0f54:	f000 b856 	b.w	80a1004 <__register_exitproc>

080a0f58 <memcpy>:
 80a0f58:	440a      	add	r2, r1
 80a0f5a:	4291      	cmp	r1, r2
 80a0f5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a0f60:	d100      	bne.n	80a0f64 <memcpy+0xc>
 80a0f62:	4770      	bx	lr
 80a0f64:	b510      	push	{r4, lr}
 80a0f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0f6a:	4291      	cmp	r1, r2
 80a0f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0f70:	d1f9      	bne.n	80a0f66 <memcpy+0xe>
 80a0f72:	bd10      	pop	{r4, pc}

080a0f74 <memset>:
 80a0f74:	4603      	mov	r3, r0
 80a0f76:	4402      	add	r2, r0
 80a0f78:	4293      	cmp	r3, r2
 80a0f7a:	d100      	bne.n	80a0f7e <memset+0xa>
 80a0f7c:	4770      	bx	lr
 80a0f7e:	f803 1b01 	strb.w	r1, [r3], #1
 80a0f82:	e7f9      	b.n	80a0f78 <memset+0x4>

080a0f84 <srand>:
 80a0f84:	b538      	push	{r3, r4, r5, lr}
 80a0f86:	4b10      	ldr	r3, [pc, #64]	; (80a0fc8 <srand+0x44>)
 80a0f88:	4604      	mov	r4, r0
 80a0f8a:	681d      	ldr	r5, [r3, #0]
 80a0f8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0f8e:	b9b3      	cbnz	r3, 80a0fbe <srand+0x3a>
 80a0f90:	2018      	movs	r0, #24
 80a0f92:	f7ff fa4d 	bl	80a0430 <malloc>
 80a0f96:	4602      	mov	r2, r0
 80a0f98:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0f9a:	b920      	cbnz	r0, 80a0fa6 <srand+0x22>
 80a0f9c:	2142      	movs	r1, #66	; 0x42
 80a0f9e:	4b0b      	ldr	r3, [pc, #44]	; (80a0fcc <srand+0x48>)
 80a0fa0:	480b      	ldr	r0, [pc, #44]	; (80a0fd0 <srand+0x4c>)
 80a0fa2:	f7ff fa5d 	bl	80a0460 <__assert_func>
 80a0fa6:	490b      	ldr	r1, [pc, #44]	; (80a0fd4 <srand+0x50>)
 80a0fa8:	4b0b      	ldr	r3, [pc, #44]	; (80a0fd8 <srand+0x54>)
 80a0faa:	e9c0 1300 	strd	r1, r3, [r0]
 80a0fae:	4b0b      	ldr	r3, [pc, #44]	; (80a0fdc <srand+0x58>)
 80a0fb0:	2100      	movs	r1, #0
 80a0fb2:	6083      	str	r3, [r0, #8]
 80a0fb4:	230b      	movs	r3, #11
 80a0fb6:	8183      	strh	r3, [r0, #12]
 80a0fb8:	2001      	movs	r0, #1
 80a0fba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a0fbe:	2200      	movs	r2, #0
 80a0fc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0fc2:	611c      	str	r4, [r3, #16]
 80a0fc4:	615a      	str	r2, [r3, #20]
 80a0fc6:	bd38      	pop	{r3, r4, r5, pc}
 80a0fc8:	20000008 	.word	0x20000008
 80a0fcc:	080a122d 	.word	0x080a122d
 80a0fd0:	080a1244 	.word	0x080a1244
 80a0fd4:	abcd330e 	.word	0xabcd330e
 80a0fd8:	e66d1234 	.word	0xe66d1234
 80a0fdc:	0005deec 	.word	0x0005deec

080a0fe0 <strcmp>:
 80a0fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a0fe8:	2a01      	cmp	r2, #1
 80a0fea:	bf28      	it	cs
 80a0fec:	429a      	cmpcs	r2, r3
 80a0fee:	d0f7      	beq.n	80a0fe0 <strcmp>
 80a0ff0:	1ad0      	subs	r0, r2, r3
 80a0ff2:	4770      	bx	lr

080a0ff4 <strlen>:
 80a0ff4:	4603      	mov	r3, r0
 80a0ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0ffa:	2a00      	cmp	r2, #0
 80a0ffc:	d1fb      	bne.n	80a0ff6 <strlen+0x2>
 80a0ffe:	1a18      	subs	r0, r3, r0
 80a1000:	3801      	subs	r0, #1
 80a1002:	4770      	bx	lr

080a1004 <__register_exitproc>:
 80a1004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1008:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a10b8 <__register_exitproc+0xb4>
 80a100c:	4606      	mov	r6, r0
 80a100e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1012:	461f      	mov	r7, r3
 80a1014:	460d      	mov	r5, r1
 80a1016:	4691      	mov	r9, r2
 80a1018:	f000 f858 	bl	80a10cc <__retarget_lock_acquire_recursive>
 80a101c:	4b27      	ldr	r3, [pc, #156]	; (80a10bc <__register_exitproc+0xb8>)
 80a101e:	681c      	ldr	r4, [r3, #0]
 80a1020:	b934      	cbnz	r4, 80a1030 <__register_exitproc+0x2c>
 80a1022:	4c27      	ldr	r4, [pc, #156]	; (80a10c0 <__register_exitproc+0xbc>)
 80a1024:	601c      	str	r4, [r3, #0]
 80a1026:	4b27      	ldr	r3, [pc, #156]	; (80a10c4 <__register_exitproc+0xc0>)
 80a1028:	b113      	cbz	r3, 80a1030 <__register_exitproc+0x2c>
 80a102a:	681b      	ldr	r3, [r3, #0]
 80a102c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1030:	6863      	ldr	r3, [r4, #4]
 80a1032:	2b1f      	cmp	r3, #31
 80a1034:	dd07      	ble.n	80a1046 <__register_exitproc+0x42>
 80a1036:	f8d8 0000 	ldr.w	r0, [r8]
 80a103a:	f000 f849 	bl	80a10d0 <__retarget_lock_release_recursive>
 80a103e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1046:	b35e      	cbz	r6, 80a10a0 <__register_exitproc+0x9c>
 80a1048:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a104c:	b988      	cbnz	r0, 80a1072 <__register_exitproc+0x6e>
 80a104e:	4b1e      	ldr	r3, [pc, #120]	; (80a10c8 <__register_exitproc+0xc4>)
 80a1050:	b923      	cbnz	r3, 80a105c <__register_exitproc+0x58>
 80a1052:	f8d8 0000 	ldr.w	r0, [r8]
 80a1056:	f000 f83a 	bl	80a10ce <__retarget_lock_release>
 80a105a:	e7f0      	b.n	80a103e <__register_exitproc+0x3a>
 80a105c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1060:	f7ff f9e6 	bl	80a0430 <malloc>
 80a1064:	2800      	cmp	r0, #0
 80a1066:	d0f4      	beq.n	80a1052 <__register_exitproc+0x4e>
 80a1068:	2300      	movs	r3, #0
 80a106a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a106e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1072:	2201      	movs	r2, #1
 80a1074:	6863      	ldr	r3, [r4, #4]
 80a1076:	2e02      	cmp	r6, #2
 80a1078:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a107c:	fa02 f203 	lsl.w	r2, r2, r3
 80a1080:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1084:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1088:	ea43 0302 	orr.w	r3, r3, r2
 80a108c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1090:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1094:	bf02      	ittt	eq
 80a1096:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a109a:	4313      	orreq	r3, r2
 80a109c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a10a0:	6863      	ldr	r3, [r4, #4]
 80a10a2:	f8d8 0000 	ldr.w	r0, [r8]
 80a10a6:	1c5a      	adds	r2, r3, #1
 80a10a8:	3302      	adds	r3, #2
 80a10aa:	6062      	str	r2, [r4, #4]
 80a10ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a10b0:	f000 f80e 	bl	80a10d0 <__retarget_lock_release_recursive>
 80a10b4:	2000      	movs	r0, #0
 80a10b6:	e7c4      	b.n	80a1042 <__register_exitproc+0x3e>
 80a10b8:	2000006c 	.word	0x2000006c
 80a10bc:	200004cc 	.word	0x200004cc
 80a10c0:	20000440 	.word	0x20000440
 80a10c4:	00000000 	.word	0x00000000
 80a10c8:	080a0431 	.word	0x080a0431

080a10cc <__retarget_lock_acquire_recursive>:
 80a10cc:	4770      	bx	lr

080a10ce <__retarget_lock_release>:
 80a10ce:	4770      	bx	lr

080a10d0 <__retarget_lock_release_recursive>:
 80a10d0:	4770      	bx	lr

080a10d2 <link_code_end>:
	...

080a10d4 <dynalib_user>:
 80a10d4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a10e4:	0000 0000 6e6f 6f00 6666 7700 6265 654c     ....on.off.webLe
 80a10f4:	0064 0000                                   d...

080a10f8 <_ZTV7TwoWire>:
	...
 80a1100:	04cf 080a 0519 080a 04f1 080a 04d1 080a     ................
 80a1110:	04f9 080a 0501 080a 0509 080a 0511 080a     ................

080a1120 <_ZTV9IPAddress>:
	...
 80a1128:	054f 080a 054d 080a 0581 080a 7061 0070     O...M.......app.

080a1138 <_ZTVN5spark12NetworkClassE>:
	...
 80a1140:	0625 080a 062f 080a 0639 080a 0643 080a     %.../...9...C...
 80a1150:	064d 080a 0659 080a 0665 080a 066d 080a     M...Y...e...m...
 80a1160:	0675 080a 0681 080a 0689 080a 0693 080a     u...............
 80a1170:	069d 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a1180:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1190 <_ZTV11USARTSerial>:
	...
 80a1198:	0901 080a 0969 080a 0945 080a 0701 080a     ....i...E.......
 80a11a8:	0915 080a 0931 080a 0923 080a 093f 080a     ....1...#...?...
 80a11b8:	0903 080a 0907 080a                         ........

080a11c0 <_ZTV9USBSerial>:
	...
 80a11c8:	09a7 080a 0a0d 080a 09e5 080a 0701 080a     ................
 80a11d8:	09d7 080a 09a9 080a 09b9 080a 0a07 080a     ................
 80a11e8:	09c9 080a 09a1 080a                         ........

080a11f0 <_ZTVN5spark9WiFiClassE>:
	...
 80a11f8:	0bcf 080a 0bc5 080a 0bbb 080a 0b2d 080a     ............-...
 80a1208:	0baf 080a 0ba3 080a 0665 080a 066d 080a     ........e...m...
 80a1218:	0b97 080a 0b8f 080a 0b85 080a 0b7b 080a     ............{...
 80a1228:	0b37 080a                                   7...

080a122c <_ZSt7nothrow>:
 80a122c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a123c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 80a124c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80a125c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80a126c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 80a127c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80a128c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

080a129d <link_const_variable_data_end>:
 80a129d:	00          	.byte	0x00
	...

080a12a0 <link_constructors_location>:
 80a12a0:	080a0615 	.word	0x080a0615
 80a12a4:	080a06ed 	.word	0x080a06ed
 80a12a8:	080a078d 	.word	0x080a078d
 80a12ac:	080a08c9 	.word	0x080a08c9
 80a12b0:	080a08ed 	.word	0x080a08ed
 80a12b4:	080a0bd9 	.word	0x080a0bd9
 80a12b8:	080a0ead 	.word	0x080a0ead

080a12bc <link_constructors_end>:
 80a12bc:	00000000 	.word	0x00000000
